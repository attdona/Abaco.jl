var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Abaco","category":"page"},{"location":"#Abaco","page":"Home","title":"Abaco","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Abaco computes formulas output from a stream of input variables.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Abaco aims to target the case where a number of IoT sensor, network devices or other types of objects that send periodic variable values must be combined into output values defined by math expressions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In a real world scenario values are coming asynchronously, delayed and out of orders. Abaco may manage values referring to different times.","category":"page"},{"location":"#Basic-Concepts","page":"Home","title":"Basic Concepts","text":"","category":"section"},{"location":"#formula","page":"Home","title":"formula","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A named math expression:","category":"page"},{"location":"","page":"Home","title":"Home","text":"    myformula = x + y","category":"page"},{"location":"","page":"Home","title":"Home","text":"As soon as all inputs variables are collected, in this case x and y, formula myformula is evaluated and onresult callback is triggered.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A formula is computable if all the independents variables belong to the same time window.","category":"page"},{"location":"#sn","page":"Home","title":"sn","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The identifier of the element sending the input variables.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is up to you to choose the acronym for sn that best fits the context: sensor name, scope name or short name if it were a unique string extracted for a long distinguish name dn string.","category":"page"},{"location":"#time-span","page":"Home","title":"time span","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A time span includes all the timestamps in a time interval:","category":"page"},{"location":"","page":"Home","title":"Home","text":"span = { t ∈ N | START_INTERVAL <= t < END_TIME }","category":"page"},{"location":"","page":"Home","title":"Home","text":"Timestamps t are integer values with second granularity. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"For example suppose that a data collection system uses a 15 minutes span interval: in this case an hour is divided into 4 intervals and from ten to eleven of some (omitted) day you have:","category":"page"},{"location":"","page":"Home","title":"Home","text":"span1 =  { t ∈ [10:00:00, 10:15:00) }\nspan2 =  { t ∈ [10:15:00, 10:30:00) }\nspan3 =  { t ∈ [10:30:00, 10:45:00) }\nspan4 =  { t ∈ [10:45:00, 11:00:00) }","category":"page"},{"location":"","page":"Home","title":"Home","text":"By convention the span interval is identified by its START_TIME.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The formula value computed from inputs with timestamps included into the span [START_TIME, END_TIME) has timestamp equal to START_TIME.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The width of the span interval is an abaco setting, user-defined at startup.","category":"page"},{"location":"#ages","page":"Home","title":"ages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The number of ages defines how many consecutive time spans are managed.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For example, for a time span of 15 minutes, set ages to 4 if your network devices may send data with a maximum delay of an hour. A received value marked with a timestamp distant 4 or more spans from the latest span is discarded.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The number of ages is an abaco setting, user-defined at startup.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is the minimal background theory, the below example should help to clarify the Abaco mechanics.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Installation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"Abaco\")    ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Usage:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Abaco\n\n# Initialize abaco context with a time_window of 60 seconds and handle\n# input values with timestamp ts up to 4 contiguous spans.\nabaco = abaco_init(width=60, ages=4) do ts, sn, fname, value, inputs\n    @info \"[$ts][$sn] function $fname=$value\"\nend\n\n# Add desired outputs in terms of inputs variables x, y, z, v, w\noutputs = [\"xysum = x + y\", \"rsigma = x * exp(y-1)\", \"wsum = (x*w + z*v)\"]\n\nfor formula in outputs\n    add_formula!(abaco, formula)\nend\n\n# Start receiving some inputs values\n# normally ts is the UTC timestamp from epoch in seconds.\n# but for semplicity assume time start from zero.\n\n# the device AG101 sends the x value at timestamp 0.\nts = 0\ndevice = \"AG101\"\nadd_value!(abaco, ts, device, \"x\", 10)\n\n# Time flows and about 1 minute later ...\n\n# the device CE987 sends the y value at timestamp 65.\nts = 65\ndevice = \"CE987\"\nadd_value!(abaco, ts, device, \"y\", 10)\n\n# Time flows and more than 1 minute later ...\n\n# Finally the device AG101 sends the y value calculated at timestamp 0.\n# At this instant the formulas that depends on x and y are computable\n# for the element AG101 at timestamp 0.\nts = 0\ndevice = \"AG101\"\nadd_value!(abaco, ts, device, \"y\", 20)\n[ Info: [0][AG101] function xysum=30\n[ Info: [0][AG101] function rsigma=1.7848230096318724e9\n\n# Now arrives the variable x from CE987 that make some formulas computables.\n# Note that x timestamp is 65, y timestamp is 101\n# and the formulas timestamp is 60: the START_TIME of the span. \nts = 101\ndevice = \"CE987\"\nadd_value!(abaco, ts, device, \"x\", 10)\n[ Info: [60][CE987] function xysum=20\n[ Info: [60][CE987] function rsigma=81030.83927575384\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the formula callback the first argument may be a user defined object, like a Socket a Channel or whatsoever communication endpoint.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"sock = connect(3001)\n\nabaco = abaco_init(handle=sock, width=900) do sock, ts, sn, name, value, inputs\n    @info \"age [$ts]: [$sn] $name = $value\"\n    msg = JSON3.write(Dict(\n                        \"sn\" => sn,\n                        \"age\" => ts, \n                        \"formula\" => name,\n                        \"value\" => value))\n    write(sock, msg*\"\\n\")\nend","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Abaco]","category":"page"},{"location":"#Abaco.Context","page":"Home","title":"Abaco.Context","text":"Maintains the state of the abaco.\n\nBefore adding formulas and values an abaco Context must be initialized by abaco_init.\n\n\n\n\n\n","category":"type"},{"location":"#Abaco.EvalError","page":"Home","title":"Abaco.EvalError","text":"Formula evaluation failure.\n\n[add_value!] throws EvalError when a runtime formula evaluation fails, for example for a wrong numbers of method args:\n\nadd_formula!(abaco, \"div(x,y,z\")\nadd_value!(abaco, ts, sn, Dict(\"x\"=>10, \"y\"=>1, \"z\"=1))\n\n\n\n\n\n","category":"type"},{"location":"#Abaco.WrongFormula","page":"Home","title":"Abaco.WrongFormula","text":"Wrong formula definition.\n\nadd_formula! throws WrongFormula when a formula is malformed, for example:\n\nadd_formula!(abaco, \"myformula = x + \")\n\n\n\n\n\n","category":"type"},{"location":"#Abaco.abaco_init-Tuple{Any}","page":"Home","title":"Abaco.abaco_init","text":"abaco_init(onresult; handle=nothing, width::Int=900, ages::Int=4)::Context\n\nInitialize the abaco context:\n\nonresult: function callback that gets called each time a formula value is computed.\nhandle: user defined object.            If handle is defined it is the first argument of onresult, default to nothing.\nwidth: the rop interval in seconds, default to 900 seconds (15 minutes).\nages: the number of active rops managed by the abaco, default to 4.\n\nExample 1: defining onresult callback that uses of an handle object.\n\n# the handle object is a socket\nsock = connect(3001)\n\nfunction onresult(handle, ts, sn, formula_name, value, inputs)\n    # build a pkt message from ts, sn, ...\n    pkt = ...\n    write(sock, pkt)\nend\n\nExample 2: defining onresult callback that doesn't use an handle object.\n\nabaco = abaco_init(onresult, handle=sock)\n\nfunction onresult(ts, sn, formula_name, value, inputs)\n    @info \"[$ts][$sn] function $fname=$value\"\nend\n\nabaco = abaco_init(onresult)\n\n\n\n\n\n","category":"method"},{"location":"#Abaco.add_formula!-Tuple{Abaco.Context, String}","page":"Home","title":"Abaco.add_formula!","text":"add_formula!(abaco::Context, formula_def::String)\n\nAdd a formula, with formula_def formatted as \"formula_name = expression\", where expression is a mathematical expression, like x + y*w.\n\n\n\n\n\n","category":"method"},{"location":"#Abaco.add_value!-Tuple{Any, Int64, String, String, Real}","page":"Home","title":"Abaco.add_value!","text":"add_value!(abaco, ts::Int, sn::String, var::String, val::Real)\n\nAdds the input variable var with value val.\n\nts: timestamp with seconds resolution\nsn: scope name \nvar: variable name\nval: variable value\n\n\n\n\n\n","category":"method"},{"location":"#Abaco.add_values!-NTuple{4, Any}","page":"Home","title":"Abaco.add_values!","text":"add_values!(abaco, ts, sn, values)\n\nAdds the input variables include in the dictionary values.\n\n    # now timestamp \n    ts = nowts()\n\n    # short name of network element\n    sn = \"trento.castello\"\n\n    values = Dict(\n        \"x\" => 23.2,\n        \"y\" => 100\n    )\n    add_values(abaco, ts, sn, values)\n\n\n\n\n\n","category":"method"},{"location":"#Abaco.add_values!-Tuple{Any, Any}","page":"Home","title":"Abaco.add_values!","text":"add_values!(abaco, payload)\n\nAdds the input variables included in the payload dictionary.\n\nThe Dict msg must contains the keys ts and sn and a numbers of other keys managed as input variables.\n\nThis function modifies the payload dictionary: sn and ts keys are popped out.  \n\n    payload = Dict(\n        \"ts\" => nowts(),\n        \"sn\" => \"trento.castello\",\n        \"x\" => 23.2,\n        \"y\" => 100\n    )\n    add_values(abaco, ts, sn, payload)\n\n\n\n\n\n","category":"method"},{"location":"#Abaco.nowts","page":"Home","title":"Abaco.nowts","text":"nowts()\n\nthe current timestamp in seconds from epoch\n\n\n\n\n\n","category":"function"},{"location":"#Abaco.rop","page":"Home","title":"Abaco.rop","text":"rop(ts::Int64, width::Int64=900)\n\nReturns the start_time of the rop time window that contains ts.\n\nThe ROP is the Report Output Period of a metric and it is the time interval defined as:\n\nROP = { t ∈ [start_time, start_time+width) }\n\nIt is customary to use the start_time to indicate a rop: the rop of ten o'clock is the time interval [10:00, 10:15).\n\n\n\n\n\n","category":"function"},{"location":"#Abaco.ropcurrent","page":"Home","title":"Abaco.ropcurrent","text":"ropcurrent(interval::Int64=900)::Int64\n\nReturns the epoch start time of the current rop. The current rop is the nearest in the present rop that satisfies the condition: rop.endtime < now.\n\n\n\n\n\n","category":"function"}]
}
